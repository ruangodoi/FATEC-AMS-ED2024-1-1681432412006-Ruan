/*---------------------------------------------------------------*/
/*          FATEC-São Caetano do Sul Estrutura de Dados          */
/*                        Prof Veríssimo                         */
/*                       Atividade B3-1                          */
/*           Objetivo: Cálculo tempo execução-Insertion Sort     */
/*            Developers: Ruan Defavari Godoi                    */
/*                        Data:12/08/2024                        */
/*---------------------------------------------------------------*/

1  for j ← 2 to length[A]
2      do key ← A[j]
3      ▷ Insert A[j] into the sorted sequence A[1 .. j − 1].
4      i ← j − 1
5      while i > 0 and A[i] > key
6          do A[i + 1] ← A[i]
7              i ← i − 1
8      A[i + 1] ← key

Calcular cada linha:
Linha 1: for j ← 2 to length[A]

Tempo: 

t (atribuição) + t (operação aritmética)
Total: 
2t

Linha 2: do key ← A[j]
Tempo: 

t (atribuição) +  t (acesso)
Total: 
2t

Linha 4: i ← j − 1
Tempo: 

t (atribuição) + t (operação aritmética)
Total: 
2t

Linha 5: while i > 0 and A[i] > key
Tempo: 

t (comparação i > 0) + t (acesso A[i]) + t (comparação A[i] > key)
Total: 
3t

Linha 6: do A[i + 1] ← A[i]
Tempo: 
t (operação aritmética i + 1) + t (acesso A[i]) + t (atribuição)
Total: 
3t

Linha 7: i ← i − 1
Tempo: 
t (operação aritmética) + t (atribuição)
Total: 
2t

Linha 8: A[i + 1] ← key
Tempo: 
t (operação aritmética) + t (atribuição)
Total: 
2t

Para cada iteração de j no loop, o tempo total depende do número de vezes que o loop while na 
linha 5 é executado. No pior caso (quando a lista está em ordem decrescente), o while é executado j−1 vezes.

O tempo total de execução para o pior caso é:
T(n)=2t+ j=2∑n[2t+2t+(j−1)⋅(3t+3t)]

Isso pode ser simplificado para:
T(n)=t(4n2+7n−6)

Portanto, o tempo total no pior caso para o algoritmo de Insertion Sort é 
𝑂(𝑛2)
